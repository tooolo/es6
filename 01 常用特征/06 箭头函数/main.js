// 箭头函数(lambda表达式) - ES6允许使用“箭头”（=>）定义函数。
// 效果如函数
// 本质是表达式

//1.1 定义普通函数
var fn1 = function(a, b) {
    return a + b; 
}; 
console.log("普通函数 type：", typeof fn1); 
console.log("普通函数 1+1=%d", fn1(1, 1)); 

//------------------------------------------------------------------------
// 箭头函数形式：将普通函数的function替换成箭头【=>】放参数后面
//1.2 定义箭头函数
var fn2 = (a, b) =>  {
    return a + b; 
}; 
console.log("箭头函数 type：", typeof fn2); 
console.log("箭头函数 1+1=%d", fn2(1, 1)); 

//------------------------------------------------------------------------
//1.3 箭头函数简写方式

//1.3.1 只有一个而参数时，可以省略圆括号
var fn3 = x =>  {return x * x}; 
console.log("箭头函数 2*2=%d", fn3(2, 2)); 

//1.3.2 函数体内代码只有一行返回语句，可省略return 和 花括号
var fn4 = x => x * x; 
console.log("箭头函数 3*3=%d", fn4(3, 3)); 

//------------------------------------------------------------------------
//2. 箭头函数有几个使用注意点(理解本质是表达式)

//2.1 函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。
//2.2 不可以当作构造函数，也就是说，不可以使用new命令，否则会抛出一个错误。
//2.3 不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替。
//2.4 不可以使用yield命令，因此箭头函数不能用作 Generator 函数。 